#!/usr/bin/python

###########################################
# Create an archive with the content of
# the docker volumes
###########################################

from os import environ
from subprocess import Popen, PIPE
from io import BytesIO
import pycurl
import json
import tarfile


###########################################
# Retrieve the gateway IP
###########################################
command1 = ['netstat', '-nr']
command2 = ['grep', '^0\.0\.0\.0']

process1 = Popen(command1, stdout=PIPE)
process2 = Popen(command2, stdin=process1.stdout, stdout=PIPE)
gateway_ip = process2.communicate()[0].split()[1].decode('ascii')


###########################################
# Retrieve the container informations
###########################################
req = pycurl.Curl()
data = BytesIO()

req.setopt(req.URL, 'http://{0}:2375/containers/{1}/json'.format(gateway_ip, environ['HOSTNAME']))
req.setopt(req.WRITEFUNCTION, data.write)
req.perform()

container = json.loads(data.getvalue().decode('ascii'))


###########################################
# Create an archive with the content of
# the writable volumes
###########################################
filename = container['Config']['Image'].replace('/', '.')
tar = tarfile.open('/tmp/{0}.tar.gz'.format(filename), 'w:gz')

for volume_path in container['VolumesRW']:
    if container['VolumesRW'][volume_path] and volume_path != '/tmp':
        tar.add(volume_path)

tar.close()
